// finds when the add item modal is shown and clear the form
// also update needed information
document.getElementById('add-item-modal').addEventListener('shown.bs.modal', function () {
  // clear the form
  const nameElement = document.getElementById('new-item-name');
  nameElement.value = "";

  const quantityElement = document.getElementById('new-item-quantity');
  quantityElement.value = "";

  const durationElement = document.getElementById('new-item-duration');
  durationElement.value = "";

  // update the date input and its min value to the current date
  const expiringDateElement = document.getElementById('new-item-expiring-date');
  const currentDate = new Date();
  expiringDateElement.min = currentDate.toISOString().split('T')[0];
  expiringDateElement.valueAsDate = currentDate;

  // clear the datalist options
  const datalistOptions = document.getElementById('datalistOptions');
  while (datalistOptions.firstChild) {
    datalistOptions.removeChild(datalistOptions.firstChild);
  }

  // Determine which history to load
  const tab = document.querySelector('.nav-link.active').id;
  let historyTable;

  if (tab === "foods-tab") {
    historyTable = FOODS_HISTORY_TABLE;
  } else if (tab === "medicines-tab") {
    historyTable = MEDICINES_HISTORY_TABLE;
  } else {
    return; // Exit if no valid tab is active
  }

  if (!currentUser) return; // Exit if user is not logged in

  // Fetch history from Firestore
  db.collection('households').doc(currentUser.uid).collection(historyTable).get()
    .then(querySnapshot => {
      querySnapshot.forEach(doc => {
        const item = doc.data();
        const option = document.createElement("option");
        datalistOptions.appendChild(option);
        option.value = item.name;
        option.setAttribute("data-value", item.duration);
      });
    })
    .catch(error => {
      console.error("Error getting history documents: ", error);
    });
});

document.getElementById('add-item-modal').querySelector('form').addEventListener("submit", addItemFromForm);

document.getElementById('edit-item-modal').addEventListener('show.bs.modal', function (event) {
  const button = event.relatedTarget;
  const listElementId = button.parentElement.parentElement.id;
  let items;

  if (listElementId === "foods-list") {
    items = foodItems;
  } else if (listElementId === "medicines-list") {
    items = medicineItems;
  }

  const id = button.getAttribute('data-bs-id');
  const item = items[id];

  if (!item) return;

  const name = item.name;
  const quantity = item.quantity;
  const formElement = document.getElementById('edit-item-modal').querySelector('form');

  formElement.setAttribute("data-item-id", id);
  formElement.setAttribute("data-list-id", listElementId);

  document.getElementById('edit-item-modal-title').textContent = '{{ page.edit }} ' + name;

  const openedItemsElement = document.getElementById('opened-items');
  const consumedItemsElement = document.getElementById('consumed-items');
  const discardedItemsElement = document.getElementById('discarded-items');

  // Reset values and set initial max
  openedItemsElement.value = 0;
  consumedItemsElement.value = 0;
  discardedItemsElement.value = 0;
  openedItemsElement.max = quantity;
  consumedItemsElement.max = quantity;
  discardedItemsElement.max = quantity;

  const updateMaxValues = () => {
    const openedVal = parseInt(openedItemsElement.value) || 0;
    const consumedVal = parseInt(consumedItemsElement.value) || 0;
    const discardedVal = parseInt(discardedItemsElement.value) || 0;

    openedItemsElement.max = quantity - (consumedVal + discardedVal);
    consumedItemsElement.max = quantity - (openedVal + discardedVal);
    discardedItemsElement.max = quantity - (openedVal + consumedVal);
  };

  openedItemsElement.addEventListener('input', updateMaxValues);
  consumedItemsElement.addEventListener('input', updateMaxValues);
  discardedItemsElement.addEventListener('input', updateMaxValues);
});

document.getElementById('edit-item-modal').querySelector('form').addEventListener("submit", editItem);

document.getElementById('new-item-name').addEventListener('change', function (event) {
  const datalist = document.getElementById('new-item-name');
  const options = Array.from(document.getElementById('datalistOptions').children);

  options.forEach((option) => {
    if (option.value === datalist.value) {
      const duration = option.getAttribute("data-value");
      document.getElementById('new-item-duration').value = duration;
      return;
    }
  });
});

function editItem(e) {
  // prevent default - we don't want the form to submit in the conventional way
  e.preventDefault();

  const listId = e.target.getAttribute("data-list-id");
  const id = e.target.getAttribute("data-item-id");
  let items, table;

  if (listId === "foods-list") {
    items = foodItems;
    table = FOODS_TABLE;
  } else if (listId === "medicines-list") {
    items = medicineItems;
    table = MEDICINES_TABLE;
  }

  const item = items[id];
  if (!item) {
    console.error("Item not found for editing!");
    return;
  }

  const openedItems = parseInt(document.getElementById('opened-items').value);
  const consumedItems = parseInt(document.getElementById('consumed-items').value);
  const discardedItems = parseInt(document.getElementById('discarded-items').value);
  const totalActioned = openedItems + consumedItems + discardedItems;

  if (totalActioned > item.quantity) {
    alert('The sum of opened, consumed, and discarded items cannot be greater than the available quantity.');
    return; // Stop the function before any database calls
  }

  if (totalActioned === 0) {
    // If no changes are made, we can just close the modal without an error
    // To get the modal instance and hide it:
    const modalElement = document.getElementById('edit-item-modal');
    const modalInstance = bootstrap.Modal.getInstance(modalElement);
    modalInstance.hide();
    return;
  }

  if (openedItems > 0) {
    openItem(id, openedItems, items, table);
  }

  if (consumedItems > 0) {
    consumeItem(id, consumedItems, items, table);
  }

  if (discardedItems > 0) {
    discardItem(id, discardedItems, items, table);
  }
}

function openItem(id, quantity, items, table) {
  const today = DateTime.now();
  const itemToOpen = items[id];
  const originalItemRef = db.collection('households').doc(currentUser.uid).collection(table).doc(id);

  // 1. Calculate the new expiration date
  let expiringDate;
  if (itemToOpen.expiring_date < today) {
    expiringDate = itemToOpen.expiring_date;
  } else {
    const newExpDate = today.plus({ days: itemToOpen.duration }).endOf('day');
    expiringDate = newExpDate > itemToOpen.expiring_date ? itemToOpen.expiring_date : newExpDate;
  }
  const expiringDateISO = expiringDate.toISO();

  // 2. Query for a matching item *before* the transaction
  const query = db.collection('households').doc(currentUser.uid).collection(table)
    .where('name', '==', itemToOpen.name)
    .where('opened', '==', true)
    .where('expiring_date', '==', expiringDateISO)
    .limit(1);

  query.get().then(matchingItemsSnapshot => {
    // 3. Run the database updates inside a safe transaction
    return db.runTransaction(async (transaction) => {
      // --- ALL READS MUST HAPPEN FIRST ---
      const originalDoc = await transaction.get(originalItemRef);
      let existingOpenedItemDoc = null;
      if (!matchingItemsSnapshot.empty) {
        existingOpenedItemDoc = await transaction.get(matchingItemsSnapshot.docs[0].ref);
      }

      // --- ALL WRITES HAPPEN AFTER THE READS ---
      if (!originalDoc.exists) {
        throw "Original item document does not exist!";
      }
      const originalData = originalDoc.data();

      // Perform write on the original (unopened) item
      if (originalData.quantity > quantity) {
        transaction.update(originalItemRef, { quantity: originalData.quantity - quantity });
      } else {
        transaction.delete(originalItemRef);
      }

      // Perform write on the opened item (either update or create)
      if (existingOpenedItemDoc && existingOpenedItemDoc.exists) {
        // MATCH FOUND: Update the existing opened item
        const newQuantity = existingOpenedItemDoc.data().quantity + quantity;
        transaction.update(existingOpenedItemDoc.ref, { quantity: newQuantity });
      } else {
        // NO MATCH: Create a new opened item
        const newItemRef = db.collection('households').doc(currentUser.uid).collection(table).doc();
        transaction.set(newItemRef, {
          name: itemToOpen.name,
          quantity: quantity,
          expiring_date: expiringDateISO,
          duration: itemToOpen.duration,
          date_opened: today.toISO(),
          opened: true
        });
      }
    });
  }).then(() => {
    // Open item transaction successfully committed!
  }).catch((error) => {
    console.error("Open item transaction failed: ", error);
  });
}

function consumeItem(id, quantity, items, table) {
  const today = DateTime.now();
  const itemToConsume = items[id];
  const itemRef = db.collection('households').doc(currentUser.uid).collection(table).doc(id);
  const statsRef = db.collection('statistics').doc(currentUser.uid);

  return db.runTransaction(async (transaction) => {
    const itemDoc = await transaction.get(itemRef);
    if (!itemDoc.exists) {
      throw "Item to consume does not exist!";
    }

    let statField;
    if (itemToConsume.expiring_date < today) {
      statField = `${table}_consumed_expired_items`; // e.g., "foods_consumed_expired_items"
    } else {
      statField = `${table}_consumed_items`; // e.g., "medicines_consumed_items"
    }

    transaction.set(statsRef, {
      [statField]: firebase.firestore.FieldValue.increment(quantity)
    }, { merge: true });

    if (itemDoc.data().quantity > quantity) {
      const newQuantity = itemDoc.data().quantity - quantity;
      transaction.update(itemRef, { quantity: newQuantity });
    } else {
      transaction.delete(itemRef);
    }
  }).then(() => {
    // Consume item transaction successful.
  }).catch((error) => {
    console.error("Consume item transaction failed: ", error);
  });
}

function discardItem(id, quantity, items, table) {
  const today = DateTime.now();
  const itemToDiscard = items[id];
  const itemRef = db.collection('households').doc(currentUser.uid).collection(table).doc(id);
  const statsRef = db.collection('statistics').doc(currentUser.uid);

  return db.runTransaction(async (transaction) => {
    const itemDoc = await transaction.get(itemRef);
    if (!itemDoc.exists) {
      throw "Item to discard does not exist!";
    }

    const statsUpdate = {};
    if (itemToDiscard.expiring_date < today) {
      statsUpdate[`${table}_expired_discarded_items`] = firebase.firestore.FieldValue.increment(quantity);
      if (itemToDiscard.opened) {
        statsUpdate[`${table}_expired_opened_items`] = firebase.firestore.FieldValue.increment(quantity);
      }
    } else {
      statsUpdate[`${table}_discarded_items`] = firebase.firestore.FieldValue.increment(quantity);
    }

    transaction.set(statsRef, statsUpdate, { merge: true });

    if (itemDoc.data().quantity > quantity) {
      const newQuantity = itemDoc.data().quantity - quantity;
      transaction.update(itemRef, { quantity: newQuantity });
    } else {
      transaction.delete(itemRef);
    }
  }).then(() => {
    // Discard item transaction successful.
  }).catch((error) => {
    console.error("Discard item transaction failed: ", error);
  });
}

function addItemFromForm(e) {
  // prevent default - we don't want the form to submit in the conventional way
  e.preventDefault();

  // find which list the item should be added to
  let listElement;
  let items;
  let sortedItems;
  let table;
  let history_table;

  // get current active tab
  const tab = document.querySelector('.nav-link.active').id;

  if (tab === "foods-tab") {
    listElement = foodsListElement;
    items = foodItems;
    sortedItems = sortedFoodItems;
    table = FOODS_TABLE;
    history_table = FOODS_HISTORY_TABLE;
  } else if (tab === "medicines-tab") {
    listElement = medicinesListElement;
    items = medicineItems;
    sortedItems = sortedMedicineItems;
    table = MEDICINES_TABLE;
    history_table = MEDICINES_HISTORY_TABLE;
  } else {
    console.error("Tab not found:", tab);
  }

  // grab the values entered into the form fields and store them in an object ready for being inserted into the DB
  // const newItem = { title: titleInput.value, body: bodyInput.value };

  const nameInput = document.getElementById("new-item-name");
  const quantityInput = document.getElementById("new-item-quantity");
  const expiringDateInput = document.getElementById("new-item-expiring-date");
  const durationInput = document.getElementById("new-item-duration");
  let expiringDate = DateTime.fromISO(expiringDateInput.value).endOf('day');

  let duration;
  if (durationInput.value === "") {
    // calculate duration based on the expiring date
    duration = Math.ceil(expiringDate.diff(DateTime.now(), 'days').days);
  } else {
    duration = durationInput.value;
  }

  addData({
    name: nameInput.value,
    quantity: quantityInput.value,
    expiring_date: expiringDate.toISO(),
    duration: duration,
    date_opened: null,
    opened: false
  }, table);

  addHistoryData(nameInput.value, durationInput.value, history_table);

  nameInput.value = "";
  quantityInput.value = "";
  expiringDateInput.value = "";
  durationInput.value = "";
}

// detect when export-products-input is clicked and export the products table
document.getElementById('export-products-input').addEventListener('click', function (e) {
  if (sortedFoodItems.length === 0 && sortedMedicineItems.length === 0) {
    alert('{{ page.no_items_to_export }}');
    return;
  }

  exportToJson(db)
  .then(result => {
    const blob = new Blob([result], {type: 'application/json'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'expiring_products.json';
    a.click();
    URL.revokeObjectURL(url);
    a.remove();
  })
  .catch(error => {
    console.error('Something went wrong during export:', error);
  })
});

// detect when import-products-input is clicked and import the products table
document.getElementById('import-products-input').addEventListener('change', function (e) {
  const file = e.target.files[0];
  const reader = new FileReader();

  reader.onload = function (e) {
    const result = e.target.result;
    clearDatabase(db)
    .then(() => importFromJson(db, result))
    .then(() => {
      displayData(foodsListElement, foodItems, sortedFoodItems, FOODS_TABLE);
      displayData(medicinesListElement, medicineItems, sortedMedicineItems, MEDICINES_TABLE);
    })
    .catch(error => {
      console.error('Could not clear & import database:', error)
    })
  };

  reader.readAsText(file);
});