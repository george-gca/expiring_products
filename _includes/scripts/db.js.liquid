function addHistoryData(name, duration, table) {
  if (!currentUser || !name) return; // Do not save if not logged in or name is empty

  // Use the item name as the document ID to prevent duplicate history entries.
  // .set() with { merge: true } will create the document or update it if it already exists.
  db.collection('households').doc(currentUser.uid).collection(table).doc(name).set({
      name: name,
      duration: duration || "" // Save duration, or an empty string if not provided
    }, { merge: true })
    .then(() => {
      // History item saved
    })
    .catch(error => {
      console.error("Error writing history document: ", error);
    });
}

function addData(newItem, table) {
  if (!currentUser) return;
  db.collection('households').doc(currentUser.uid).collection(table).add(newItem)
  .then(docRef => {/* Document written */})
    .catch(error => console.error("Error adding document: ", error));
}

function setupRealtimeListener(listElement, sortedItems, table) {
  if (!currentUser) return;

  const fuseOptions = {
    keys: ['name'],
    threshold: 0.4,
    isCaseSensitive: false,
  };

  // Get a reference to the search container for this tab
  const searchContainer = document.getElementById(`${table}-search-container`);

  db.collection('households').doc(currentUser.uid).collection(table)
    .orderBy("expiring_date", "asc")
    .onSnapshot(querySnapshot => {
      let currentItemsObject;
      // Clear and re-assign the global variable
      if (table === FOODS_TABLE) {
        foodItems = {};
        currentItemsObject = foodItems;
      } else if (table === UTILITIES_TABLE) {
        utilityItems = {};
        currentItemsObject = utilityItems;
      } else if (table === MEDICINES_TABLE) {
        medicineItems = {};
        currentItemsObject = medicineItems;
      } else {
        console.error("Unknown table: ", table);
        return;
      }

      // Clear the list in the UI
      while (listElement.firstChild) {
        listElement.removeChild(listElement.firstChild);
      }

      // Repopulate the global object with fresh data
      querySnapshot.forEach(doc => {
        const data = doc.data();
        currentItemsObject[doc.id] = {
          id: doc.id,
          ...data,
          expiring_date: DateTime.fromISO(data.expiring_date)
        };
      });

      sortItems(currentItemsObject, sortedItems);

      // Create or update the Fuse.js index for the correct tab
      if (table === FOODS_TABLE) {
        foodsFuse = new Fuse(sortedItems, fuseOptions);
      } else if (table === UTILITIES_TABLE) {
        utilitiesFuse = new Fuse(sortedItems, fuseOptions);
      } else if (table === MEDICINES_TABLE) {
        medicinesFuse = new Fuse(sortedItems, fuseOptions);
      }

      // Render the full list initially
      if (sortedItems.length === 0) {
        // Hide search bar if list is empty
        if (searchContainer) searchContainer.style.display = 'none';

        const li = document.createElement("li");
        li.classList.add("list-group-item");
        li.textContent = "{{ page.no_items }}";
        listElement.appendChild(li);
      } else {
        // Show search bar if list has items
        if (searchContainer) searchContainer.style.display = '';

        for (const item of sortedItems) {
          const li = document.createElement("li");
          // Add a unique ID to each list item
          li.id = `item-${item.id}`;
          li.setAttribute("data-item-id", item.id);
          li.innerHTML = `
            <button type="button" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" data-bs-toggle="modal" data-bs-target="#edit-item-modal" data-bs-id="${item.id}">
              <div class="d-flex align-items-center">
                <div class="ms-2 me-auto">
                  <div class="fw-bold">${item.name}</div>
                  ${DateTime.fromISO(item.expiring_date).setLocale('{{ site.active_lang }}').toRelative()}
                </div>
              </div>
              <div class="d-flex align-items-center">
                <span class="badge text-bg-primary rounded-pill">${item.quantity}</span>
                <span class="ms-2"><i class="fa-solid fa-chevron-right"></i></span>
              </div>
            </button>
          `;
          listElement.appendChild(li);
        }
      }
      checkExpiryDates();
    }, error => {
      console.error("Firestore listener error: ", error);
    }
  );
}

function editData(editedItem, table) {
  if (!currentUser) return;

  // 1. Create a copy of the item's data.
  const dataToUpdate = { ...editedItem };

  // 2. Remove the id from the data object, as it cannot be part of the update payload.
  delete dataToUpdate.id;

  // 3. Perform the update.
  db.collection('households').doc(currentUser.uid).collection(table).doc(editedItem.id).update(dataToUpdate)
    .then(() => {
      // Document successfully updated
    })
    .catch(error => {
      console.error("Error updating document: ", error);
    });
}

function deleteData(id, table) {
  if (!currentUser) return;
  db.collection('households').doc(currentUser.uid).collection(table).doc(id).delete()
    .catch(error => console.error("Error deleting document: ", error));
}
