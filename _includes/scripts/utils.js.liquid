function sortItems(items, sortedItems) {
  sortedItems.length = 0;
  sortedItems.push(...Object.values(items));
  // sort the items by expiring date, opened and quantity
  sortedItems.sort((a, b) => a.expiring_date - b.expiring_date || b.opened - a.opened || b.quantity - a.quantity);
}

// Register service worker to control making site work offline
if('serviceWorker' in navigator) {
  navigator.serviceWorker
  .register('/assets/js/sw.js');
}

// run a callback every day
const everyDay = (callback) => {
  const now = new Date();
  setTimeout(async () =>
    {
      await callback();
      everyDay(callback);
    }
    , 24 * 3600000 - now.getHours() * 3600000 - now.getMinutes() * 60000 - now.getSeconds() * 1000 - now.getMilliseconds()
  )
};

function checkExpiryDateInList(item, idx) {
  const now = DateTime.now();

  if (DateTime.fromISO(item.expiring_date) < now) {
    // mark item inside list as danger
    const listItem = document.getElementById(this.listId).children[idx].children[0];

    if (listItem.classList.contains('list-group-item-danger')) {
      return false;
    }

    if (listItem.classList.contains('list-group-item-warning')) {
      listItem.classList.remove('list-group-item-warning');
    }

    listItem.classList.add('list-group-item-danger');

  } else {
    const diffDays = Interval.fromDateTimes(now, item.expiring_date).length('days');

    if (diffDays <= 3) {
      // less than 3 days left, mark item as warning
      const listItem = document.getElementById(this.listId).children[idx].children[0];
      if (listItem.classList.contains('list-group-item-warning')) {
        return false;
      }

      listItem.classList.add('list-group-item-warning');

    } else {
      // since the items are sorted by expiry date, we can break the loop
      return true;
    }
  }
  return false;
}

function checkExpiryDates() {
  // check for expired items in sortedFoodItems and sortedMedicineItems
  sortedFoodItems.some(
    // 1st Argument to forEach: callback
    checkExpiryDateInList,
    // 2nd Argument to forEach: thisArg
    { listId: `${FOODS_TABLE}-list` }
  );

  sortedUtilityItems.some(
    // 1st Argument to forEach: callback
    checkExpiryDateInList,
    // 2nd Argument to forEach: thisArg
    { listId: `${UTILITIES_TABLE}-list` }
  );

  sortedMedicineItems.some(
    // 1st Argument to forEach: callback
    checkExpiryDateInList,
    // 2nd Argument to forEach: thisArg
    { listId: `${MEDICINES_TABLE}-list` }
  );
}

everyDay(checkExpiryDates);
