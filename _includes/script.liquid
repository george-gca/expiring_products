<script type="module">
  // TODO: when adding or editing items, only update the list, don't reload the whole list

  import { clearDatabase, exportToJson, importFromJson } from '/assets/js/idb-backup-and-restore.mjs';

  var DateTime = luxon.DateTime;
  var Interval = luxon.Interval;

  const FOODS_TABLE = "foods_os";
  const foodsListElement = document.getElementById('foods-list');
  let foodItems = {};
  let sortedFoodItems = [];

  const MEDICINES_TABLE = "medicines_os";
  const medicinesListElement = document.getElementById('medicines-list');
  let medicineItems = {};
  let sortedMedicineItems = [];

  const FOODS_HISTORY_TABLE = "foods_history_os";
  const MEDICINES_HISTORY_TABLE = "medicines_history_os";

  const firebaseConfig = {
    apiKey: "{{ site.env.FIREBASE_API_KEY }}",
    authDomain: "{{ site.env.FIREBASE_AUTH_DOMAIN }}",
    projectId: "{{ site.env.FIREBASE_PROJECT_ID }}",
    storageBucket: "{{ site.env.FIREBASE_STORAGE_BUCKET }}",
    messagingSenderId: "{{ site.env.FIREBASE_MESSAGING_SENDER_ID }}",
    appId: "{{ site.env.FIREBASE_APP_ID }}"
  };

  firebase.initializeApp(firebaseConfig);
  const auth = firebase.auth();
  const db = firebase.firestore();
  let currentUser;

  // DOM Element references for Auth
  const loginContainer = document.getElementById('login-container');
  const mainContent = document.getElementById('tabs');
  const tabContents = document.getElementById('tabsContents');

  const emailInput = document.getElementById('email');
  const passwordInput = document.getElementById('password');
  const loginBtn = document.getElementById('login-btn');
  const signupBtn = document.getElementById('signup-btn');
  const logoutBtn = document.getElementById('logout-btn');

  // Sign up new users
  signupBtn.addEventListener('click', e => {
    const email = emailInput.value;
    const password = passwordInput.value;
    auth.createUserWithEmailAndPassword(email, password)
      .then(userCredential => {
        // Signed in
        console.log('User signed up:', userCredential.user);
      })
      .catch(error => {
        alert(error.message);
      });
  });

  // Login existing users
  loginBtn.addEventListener('click', e => {
    const email = emailInput.value;
    const password = passwordInput.value;
    auth.signInWithEmailAndPassword(email, password)
      .then(userCredential => {
        // Signed in
        console.log('User logged in:', userCredential.user);
      })
      .catch(error => {
        alert(error.message);
      });
  });

  // Logout user
  logoutBtn.addEventListener('click', e => {
    auth.signOut().then(() => {
      console.log('User logged out');
    }).catch(error => {
      alert(error.message);
    });
  });

  auth.onAuthStateChanged(user => {
    if (user) {
      currentUser = user;
      loginContainer.style.display = 'none';
      mainContent.style.display = 'flex';
      tabContents.style.display = 'block';
      logoutBtn.style.display = 'block';

      // Call the new real-time listeners instead of displayData
      setupRealtimeListener(foodsListElement, foodItems, sortedFoodItems, 'foods');
      setupRealtimeListener(medicinesListElement, medicineItems, sortedMedicineItems, 'medicines');
    } else {
      currentUser = null;
      loginContainer.style.display = 'block';
      mainContent.style.display = 'none';
      tabContents.style.display = 'none';
      logoutBtn.style.display = 'none';
    }
  });

  {%  comment  %}
  // import { clearDatabase, exportToJson, importFromJson } from '/assets/js/idb-backup-and-restore.mjs';

  // var DateTime = luxon.DateTime;
  // var Interval = luxon.Interval;

  // const FOODS_TABLE = "foods_os";
  // const foodsListElement = document.getElementById('foods-list');
  // let foodItems = {};
  // let sortedFoodItems = [];

  // const MEDICINES_TABLE = "medicines_os";
  // const medicinesListElement = document.getElementById('medicines-list');
  // let medicineItems = {};
  // let sortedMedicineItems = [];

  // const FOODS_HISTORY_TABLE = "foods_history_os";
  // const MEDICINES_HISTORY_TABLE = "medicines_history_os";

  // // create an instance of a db object for us to store the open database in
  // let db;

  {% endcomment %}
  {% include scripts/ui.js.liquid %}
  {% include scripts/utils.js.liquid %}
  {% include scripts/db.js.liquid %}
</script>