<script type="module">
  import { clearDatabase, exportToJson, importFromJson } from '/assets/js/idb-backup-and-restore.mjs';

  var DateTime = luxon.DateTime;
  var Interval = luxon.Interval;

  const FOODS_TABLE = "foods";
  const foodsListElement = document.getElementById(`${FOODS_TABLE}-list`);
  const FOODS_HISTORY_TABLE = `${FOODS_TABLE}_history`;
  let foodItems = {};
  let sortedFoodItems = [];
  let foodsFuse;

  const UTILITIES_TABLE = "utilities";
  const utilitiesListElement = document.getElementById(`${UTILITIES_TABLE}-list`);
  const UTILITIES_HISTORY_TABLE = `${UTILITIES_TABLE}_history`;
  let utilityItems = {};
  let sortedUtilityItems = [];
  let utilitiesFuse;

  const MEDICINES_TABLE = "medicines";
  const medicinesListElement = document.getElementById(`${MEDICINES_TABLE}-list`);
  const MEDICINES_HISTORY_TABLE = `${MEDICINES_TABLE}_history`;
  let medicineItems = {};
  let sortedMedicineItems = [];
  let medicinesFuse;


  const firebaseConfig = {
    apiKey: "{{ site.env.FIREBASE_API_KEY }}",
    authDomain: "{{ site.env.FIREBASE_AUTH_DOMAIN }}",
    projectId: "{{ site.env.FIREBASE_PROJECT_ID }}",
    storageBucket: "{{ site.env.FIREBASE_STORAGE_BUCKET }}",
    messagingSenderId: "{{ site.env.FIREBASE_MESSAGING_SENDER_ID }}",
    appId: "{{ site.env.FIREBASE_APP_ID }}"
  };

  firebase.initializeApp(firebaseConfig);
  const auth = firebase.auth();
  const db = firebase.firestore();
  let currentUser;

  // DOM Element references for Auth
  const loginContainer = document.getElementById('login-container');
  const mainContent = document.getElementById('tabs');
  const tabContents = document.getElementById('tabsContents');

  const emailInput = document.getElementById('email');
  const passwordInput = document.getElementById('password');
  const loginBtn = document.getElementById('login-btn');
  const signupBtn = document.getElementById('signup-btn');
  const logoutBtn = document.getElementById('logout-btn');
  const forgotPasswordBtn = document.getElementById('forgot-password-btn');

  // Sign up new users
  signupBtn.addEventListener('click', e => {
    const email = emailInput.value;
    const password = passwordInput.value;
    auth.createUserWithEmailAndPassword(email, password)
      .then(userCredential => {
        // Signed in
      })
      .catch(error => {
        alert(error.message);
      });
  });

  // Login existing users
  loginBtn.addEventListener('click', e => {
    const email = emailInput.value;
    const password = passwordInput.value;
    auth.signInWithEmailAndPassword(email, password)
      .then(userCredential => {
        // Signed in
      })
      .catch(error => {
        console.error('Sign in error:', error);
        alert(error.message);
      });
  });

  // Logout user
  logoutBtn.addEventListener('click', e => {
    auth.signOut().then(() => {
      // User logged out
    }).catch(error => {
      console.error('Sign out error:', error);
      alert(error.message);
    });
  });

  // Handle forgot password
  forgotPasswordBtn.addEventListener('click', () => {
    const email = emailInput.value;
    if (!email) {
      alert('Please enter your email address in the email field.');
      return;
    }

    auth.sendPasswordResetEmail(email)
      .then(() => {
        // Email sent.
        alert('Password reset email sent! Please check your inbox.');
      })
      .catch((error) => {
        // An error happened.
        alert(error.message);
        console.error('Error sending password reset email:', error);
      });
  });

  auth.onAuthStateChanged(user => {
    if (user) {
      // User is signed in. Show the main content.
      currentUser = user;
      loginContainer.style.display = 'none';
      mainContent.style.display = 'flex';
      tabContents.style.display = 'block';
      // logoutBtn.style.display = 'block';

      // Call the new real-time listeners instead of displayData
      setupRealtimeListener(foodsListElement, sortedFoodItems, FOODS_TABLE);
      setupRealtimeListener(utilitiesListElement, sortedUtilityItems, UTILITIES_TABLE);
      setupRealtimeListener(medicinesListElement, sortedMedicineItems, MEDICINES_TABLE);

      const foodsSearchInput = document.getElementById(`${FOODS_TABLE}-search-input`);
      const utilitiesSearchInput = document.getElementById(`${UTILITIES_TABLE}-search-input`);
      const medicinesSearchInput = document.getElementById(`${MEDICINES_TABLE}-search-input`);

      const handleSearch = (searchTerm, fuseInstance, listElement) => {
        const allItems = listElement.querySelectorAll('li[data-item-id]');

        if (!searchTerm) {
          allItems.forEach(li => li.style.display = ''); // Show all
          return;
        }

        const results = fuseInstance.search(searchTerm);
        const matchingIds = new Set(results.map(result => result.item.id));

        allItems.forEach(li => {
          const itemId = li.getAttribute('data-item-id');
          if (matchingIds.has(itemId)) {
            li.style.display = ''; // Show match
          } else {
            li.style.display = 'none'; // Hide non-match
          }
        });
      };

      foodsSearchInput.addEventListener('input', (e) => handleSearch(e.target.value, foodsFuse, foodsListElement));
      utilitiesSearchInput.addEventListener('input', (e) => handleSearch(e.target.value, utilitiesFuse, utilitiesListElement));
      medicinesSearchInput.addEventListener('input', (e) => handleSearch(e.target.value, medicinesFuse, medicinesListElement));

    } else {
      // User is signed out. Show the login form.
      currentUser = null;
      loginContainer.style.display = 'block';
      mainContent.style.display = 'none';
      tabContents.style.display = 'none';
      // logoutBtn.style.display = 'none';
    }

    // Reveal the content after the logic is complete
    document.body.classList.remove('is-loading');
  });

  {% include scripts/ui.js.liquid %}
  {% include scripts/utils.js.liquid %}
  {% include scripts/db.js.liquid %}
</script>